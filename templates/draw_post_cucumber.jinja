{% extends "base.jinja" %}
{% block title %}
  {{ super() }} | {{
  ftl_get_message("community-drawing-new") }} @ {{ community_name }}
{% endblock title %}
{%
block head %} {{ super() }}
<style>
  #cucumber-color-picker-foreground-preview {
    width: 40px;
    height: 40px;
    background-color: {{ foreground_color }};
    border: 1px solid black;
  }

  #cucumber-color-picker-background-preview {
    width: 40px;
    height: 40px;
    background-color: {{ background_color }};
    border: 1px solid black;
  }
</style>
{% endblock head %}
{% block content %}
  <div class="center">
    <h2>{{ ftl_get_message("community-drawing-new") }} @ {{ community_name }}</h2>
  </div>
  <div id="cucumber-container">
    <div id="cucumber-canvas-safe"></div>
    <div id="cucumber-controls-container">
      <div id="cucumber-controls-drawing">
        <div id="cucumber-pen-size-container">
          <input type="range" id="cucumber-pen-size-slider" min="1" max="30" value="2" />
          <span id="cucumber-pen-size-value">2</span>
        </div>
        <div id="cucumber-color-picker-container">
          <div id="cucumber-color-picker-option">
            <div id="cucumber-color-picker-foreground-preview"></div>
            <input type="radio"
                   id="cucumber-color-picker-foreground"
                   name="color-picker"
                   value="{{ foreground_color }}"
                   checked />
          </div>
          <div id="cucumber-color-picker-option">
            <div id="cucumber-color-picker-background-preview"></div>
            <input type="radio"
                   id="cucumber-color-picker-background"
                   name="color-picker"
                   value="{{ background_color }}" />
          </div>
        </div>
        <div id="cucumber-undo-redo-container">
          <input type="button" id="cucumber-undo" value="{{ ftl_get_message("cucumber-undo") }}" />
        </div>
      </div>
      <div>
        <input type="button" id="cucumber-save" value="{{ ftl_get_message("cucumber-save") }}" />
      </div>
    </div>
  </div>
  <script type="importmap">
  {
    "imports": {
      "lz-string": "https://esm.sh/lz-string@1.5.0"
    }
  }
  </script>
  <script type="module">
  document.addEventListener("DOMContentLoaded", (event) => {
    import("{{ '/static/cucumber/cucumber.js' | cachebuster | safe }}").then((module) => {
      // Set up cucumber
      const canvasContainer = document.getElementById("cucumber-canvas-safe");
      const cucumber = new module.default(canvasContainer, {
        penSize: 2,
        width: {{ width }},
        height: {{ height }},
        backgroundColor: "{{ background_color }}",
        foregroundColor: "{{ foreground_color }}",
      });

      // Set up color picker
      const colorPickerOptionBackground = document.getElementById("cucumber-color-picker-background");
      const colorPickerOptionForeground = document.getElementById("cucumber-color-picker-foreground");
      const colorPickerOptionBackgroundPreview = document.getElementById("cucumber-color-picker-background-preview");
      const colorPickerOptionForegroundPreview = document.getElementById("cucumber-color-picker-foreground-preview");

      const handleColorPickerClick = (
        element,
        radioButton,
      ) => {
        element.addEventListener("click", () => {
          radioButton.checked = true;
          cucumber.setPenColor(radioButton.value);
        });
      };

      handleColorPickerClick(colorPickerOptionBackground, colorPickerOptionBackground);
      handleColorPickerClick(colorPickerOptionForeground, colorPickerOptionForeground);
      handleColorPickerClick(colorPickerOptionBackgroundPreview, colorPickerOptionBackground);
      handleColorPickerClick(colorPickerOptionForegroundPreview, colorPickerOptionForeground);

      // Set up pen size slider
      const penSizeSlider = document.getElementById("cucumber-pen-size-slider");
      const penSizeValue = document.getElementById("cucumber-pen-size-value");
      penSizeSlider.addEventListener("input", () => {
        cucumber.setPenSize(Number.parseInt(penSizeSlider.value ?? "2"));
        penSizeValue.textContent = penSizeSlider.value;
      });

      // Set up undo and redo buttons
      const undoButton = document.getElementById("cucumber-undo");
      undoButton.addEventListener("click", () => cucumber.undo());

      // Set up shortcut keys
      document.addEventListener("keydown", (e) => {
        if (e.ctrlKey || e.metaKey) {
          if (e.key === "z") {
            e.preventDefault();
              cucumber.undo();
            }
        }
      });

      // Set up save button
      const saveButton = document.getElementById("cucumber-save");
      saveButton.addEventListener("click", () => {
        const canvas = cucumber.getCanvas();
        const animation = cucumber.getReplay();

        const form = new FormData();
        form.append("image", canvas.toDataURL("image/png"));
        form.append("animation", animation);
        form.append("community_id", "{{ community_id }}");
        form.append("security_timer", cucumber.getInitializedAt());
        form.append("security_count", cucumber.getStrokeCount() - 2); // For initial fill and final restore
        form.append("width", {{ width }});
        form.append("height", {{ height }});
        form.append("tool", "cucumber");

        fetch("/draw/finish", {
          method: "POST",
          body: form,
        })
        .then((response) => response.json())
        .then(async (data) => {
          if (data?.error) {
            alert(data.error);
          } else {
            location.href = `/posts/${data.post_id}/publish`;
          }
        })
        .catch((error) => {
          alert(
            "{{ ftl_get_message("community-drawing-post-error") }}"
          );
        });
      });
    });
  });
  </script>
{% endblock content %}
